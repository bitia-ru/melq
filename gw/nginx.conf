worker_processes 16;

events {
    worker_connections 1024;
    use epoll;
}

error_log /var/log/nginx/error.log debug;

http {
    include mime.types;
    default_type application/octet-stream;

    sendfile on;

    keepalive_timeout 65;

    upstream auth {
      server auth:3002;
    }
    
    upstream backend {
      server backend:3000;
    }

    upstream frontend {
      server frontend:80;
    }

    server {
      listen *:80;
      server_name demo0.bitia.ru;
      access_log /var/log/nginx/access.log;
      error_log /var/log/nginx/error.log debug;

      proxy_http_version 1.1;

      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection "upgrade";
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

      client_max_body_size 10m;
      client_body_buffer_size 128k;
      proxy_connect_timeout 6000;
      proxy_send_timeout 6000;
      proxy_read_timeout 6000;
      proxy_buffer_size 4k;
      proxy_buffers 4 32k;
      proxy_busy_buffers_size 64k;
      proxy_temp_file_write_size 64k;
      send_timeout 6000;
      proxy_buffering off;
      proxy_next_upstream error;

      location /api/v1/user_sessions {
          proxy_pass http://auth;
      }

      location /api {
          auth_request /auth;
          auth_request_set $user_id $upstream_http_x_user_id;
          proxy_set_header x_user_id $user_id;
          proxy_pass http://backend;
      }

      location /rails {
          auth_request /auth;
          auth_request_set $user_id $upstream_http_x_user_id;
          proxy_set_header x_user_id $user_id;
          proxy_pass http://backend;
      }

      location /alive {
          auth_request /auth;
          auth_request_set $user_id $upstream_http_x_user_id;
          proxy_set_header x_user_id $user_id;
          proxy_pass http://backend;
      }

      location /cable {
          proxy_pass http://backend;
      }

      location / {
          auth_request /auth;
          auth_request_set $user_id $upstream_http_x_user_id;
          proxy_set_header x_user_id $user_id;    
          proxy_pass http://frontend;
      }

      location /auth/ {
          proxy_pass http://auth;
      }

      location = /auth {
          proxy_pass http://auth;
          proxy_set_header X-Original-URI $request_uri;
          proxy_set_header Content-Length 0;
      }

      error_page 401 = @error401;

      location @error401 {
        return 302 /#signin;
      }
    }
}
